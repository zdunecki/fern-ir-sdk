/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as FernIr from "../../..";
export declare type ResolvedTypeReference = FernIr.ResolvedTypeReference.Container | FernIr.ResolvedTypeReference.Named | FernIr.ResolvedTypeReference.Primitive | FernIr.ResolvedTypeReference.Unknown;
export declare namespace ResolvedTypeReference {
    interface Container extends _Utils {
        type: "container";
        container: FernIr.ContainerType;
    }
    interface Named extends FernIr.ResolvedNamedType, _Utils {
        type: "named";
    }
    interface Primitive extends _Utils {
        type: "primitive";
        primitive: FernIr.PrimitiveType;
    }
    interface Unknown extends _Utils {
        type: "unknown";
    }
    interface _Utils {
        _visit: <_Result>(visitor: FernIr.ResolvedTypeReference._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        container: (value: FernIr.ContainerType) => _Result;
        named: (value: FernIr.ResolvedNamedType) => _Result;
        primitive: (value: FernIr.PrimitiveType) => _Result;
        unknown: () => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const ResolvedTypeReference: {
    readonly container: (value: FernIr.ContainerType) => FernIr.ResolvedTypeReference.Container;
    readonly named: (value: FernIr.ResolvedNamedType) => FernIr.ResolvedTypeReference.Named;
    readonly primitive: (value: FernIr.PrimitiveType) => FernIr.ResolvedTypeReference.Primitive;
    readonly unknown: () => FernIr.ResolvedTypeReference.Unknown;
    readonly _visit: <_Result>(value: FernIr.ResolvedTypeReference, visitor: FernIr.ResolvedTypeReference._Visitor<_Result>) => _Result;
};

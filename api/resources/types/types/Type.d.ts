/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as FernIr from "../../..";
export declare type Type = FernIr.Type.Alias | FernIr.Type.Enum | FernIr.Type.Object_ | FernIr.Type.Union | FernIr.Type.UndiscriminatedUnion;
export declare namespace Type {
    interface Alias extends FernIr.AliasTypeDeclaration, _Utils {
        type: "alias";
    }
    interface Enum extends FernIr.EnumTypeDeclaration, _Utils {
        type: "enum";
    }
    interface Object_ extends FernIr.ObjectTypeDeclaration, _Utils {
        type: "object";
    }
    interface Union extends FernIr.UnionTypeDeclaration, _Utils {
        type: "union";
    }
    interface UndiscriminatedUnion extends FernIr.UndiscriminatedUnionTypeDeclaration, _Utils {
        type: "undiscriminatedUnion";
    }
    interface _Utils {
        _visit: <_Result>(visitor: FernIr.Type._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        alias: (value: FernIr.AliasTypeDeclaration) => _Result;
        enum: (value: FernIr.EnumTypeDeclaration) => _Result;
        object: (value: FernIr.ObjectTypeDeclaration) => _Result;
        union: (value: FernIr.UnionTypeDeclaration) => _Result;
        undiscriminatedUnion: (value: FernIr.UndiscriminatedUnionTypeDeclaration) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const Type: {
    readonly alias: (value: FernIr.AliasTypeDeclaration) => FernIr.Type.Alias;
    readonly enum: (value: FernIr.EnumTypeDeclaration) => FernIr.Type.Enum;
    readonly object: (value: FernIr.ObjectTypeDeclaration) => FernIr.Type.Object_;
    readonly union: (value: FernIr.UnionTypeDeclaration) => FernIr.Type.Union;
    readonly undiscriminatedUnion: (value: FernIr.UndiscriminatedUnionTypeDeclaration) => FernIr.Type.UndiscriminatedUnion;
    readonly _visit: <_Result>(value: FernIr.Type, visitor: FernIr.Type._Visitor<_Result>) => _Result;
};

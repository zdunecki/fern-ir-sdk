"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthScheme = void 0;
const FernIr = __importStar(require("../../.."));
exports.AuthScheme = {
    bearer: (value) => {
        return Object.assign(Object.assign({}, value), { type: "bearer", _visit: function (visitor) {
                return FernIr.AuthScheme._visit(this, visitor);
            } });
    },
    basic: (value) => {
        return Object.assign(Object.assign({}, value), { type: "basic", _visit: function (visitor) {
                return FernIr.AuthScheme._visit(this, visitor);
            } });
    },
    header: (value) => {
        return Object.assign(Object.assign({}, value), { type: "header", _visit: function (visitor) {
                return FernIr.AuthScheme._visit(this, visitor);
            } });
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case "bearer":
                return visitor.bearer(value);
            case "basic":
                return visitor.basic(value);
            case "header":
                return visitor.header(value);
            default:
                return visitor._other(value);
        }
    },
};

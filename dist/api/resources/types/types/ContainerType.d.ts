/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as FernIr from "../../..";
export declare type ContainerType = FernIr.ContainerType.List | FernIr.ContainerType.Map | FernIr.ContainerType.Optional | FernIr.ContainerType.Set | FernIr.ContainerType.Literal;
export declare namespace ContainerType {
    interface List extends _Utils {
        type: "list";
        list: FernIr.TypeReference;
    }
    interface Map extends FernIr.MapType, _Utils {
        type: "map";
    }
    interface Optional extends _Utils {
        type: "optional";
        optional: FernIr.TypeReference;
    }
    interface Set extends _Utils {
        type: "set";
        set: FernIr.TypeReference;
    }
    interface Literal extends _Utils {
        type: "literal";
        literal: FernIr.Literal;
    }
    interface _Utils {
        _visit: <_Result>(visitor: FernIr.ContainerType._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        list: (value: FernIr.TypeReference) => _Result;
        map: (value: FernIr.MapType) => _Result;
        optional: (value: FernIr.TypeReference) => _Result;
        set: (value: FernIr.TypeReference) => _Result;
        literal: (value: FernIr.Literal) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const ContainerType: {
    readonly list: (value: FernIr.TypeReference) => FernIr.ContainerType.List;
    readonly map: (value: FernIr.MapType) => FernIr.ContainerType.Map;
    readonly optional: (value: FernIr.TypeReference) => FernIr.ContainerType.Optional;
    readonly set: (value: FernIr.TypeReference) => FernIr.ContainerType.Set;
    readonly literal: (value: FernIr.Literal) => FernIr.ContainerType.Literal;
    readonly _visit: <_Result>(value: FernIr.ContainerType, visitor: FernIr.ContainerType._Visitor<_Result>) => _Result;
};

/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as FernIr from "../../..";
export declare type ExampleTypeShape = FernIr.ExampleTypeShape.Alias | FernIr.ExampleTypeShape.Enum | FernIr.ExampleTypeShape.Object_ | FernIr.ExampleTypeShape.Union | FernIr.ExampleTypeShape.UndiscriminatedUnion;
export declare namespace ExampleTypeShape {
    interface Alias extends FernIr.ExampleAliasType, _Utils {
        type: "alias";
    }
    interface Enum extends FernIr.ExampleEnumType, _Utils {
        type: "enum";
    }
    interface Object_ extends FernIr.ExampleObjectType, _Utils {
        type: "object";
    }
    interface Union extends FernIr.ExampleUnionType, _Utils {
        type: "union";
    }
    interface UndiscriminatedUnion extends FernIr.ExampleUndiscriminatedUnionType, _Utils {
        type: "undiscriminatedUnion";
    }
    interface _Utils {
        _visit: <_Result>(visitor: FernIr.ExampleTypeShape._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        alias: (value: FernIr.ExampleAliasType) => _Result;
        enum: (value: FernIr.ExampleEnumType) => _Result;
        object: (value: FernIr.ExampleObjectType) => _Result;
        union: (value: FernIr.ExampleUnionType) => _Result;
        undiscriminatedUnion: (value: FernIr.ExampleUndiscriminatedUnionType) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const ExampleTypeShape: {
    readonly alias: (value: FernIr.ExampleAliasType) => FernIr.ExampleTypeShape.Alias;
    readonly enum: (value: FernIr.ExampleEnumType) => FernIr.ExampleTypeShape.Enum;
    readonly object: (value: FernIr.ExampleObjectType) => FernIr.ExampleTypeShape.Object_;
    readonly union: (value: FernIr.ExampleUnionType) => FernIr.ExampleTypeShape.Union;
    readonly undiscriminatedUnion: (value: FernIr.ExampleUndiscriminatedUnionType) => FernIr.ExampleTypeShape.UndiscriminatedUnion;
    readonly _visit: <_Result>(value: FernIr.ExampleTypeShape, visitor: FernIr.ExampleTypeShape._Visitor<_Result>) => _Result;
};

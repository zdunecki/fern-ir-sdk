"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExamplePrimitive = void 0;
const FernIr = __importStar(require("../../../../api"));
const core = __importStar(require("../../../../core"));
exports.ExamplePrimitive = core.serialization
    .union("type", {
    integer: core.serialization.object({
        integer: core.serialization.number(),
    }),
    double: core.serialization.object({
        double: core.serialization.number(),
    }),
    string: core.serialization.object({
        string: core.serialization.lazyObject(() => __awaiter(void 0, void 0, void 0, function* () { return (yield Promise.resolve().then(() => __importStar(require("../../..")))).EscapedString; })),
    }),
    boolean: core.serialization.object({
        boolean: core.serialization.boolean(),
    }),
    long: core.serialization.object({
        long: core.serialization.number(),
    }),
    datetime: core.serialization.object({
        datetime: core.serialization.date(),
    }),
    date: core.serialization.object({
        date: core.serialization.string(),
    }),
    uuid: core.serialization.object({
        uuid: core.serialization.string(),
    }),
})
    .transform({
    transform: (value) => {
        switch (value.type) {
            case "integer":
                return FernIr.ExamplePrimitive.integer(value.integer);
            case "double":
                return FernIr.ExamplePrimitive.double(value.double);
            case "string":
                return FernIr.ExamplePrimitive.string(value.string);
            case "boolean":
                return FernIr.ExamplePrimitive.boolean(value.boolean);
            case "long":
                return FernIr.ExamplePrimitive.long(value.long);
            case "datetime":
                return FernIr.ExamplePrimitive.datetime(value.datetime);
            case "date":
                return FernIr.ExamplePrimitive.date(value.date);
            case "uuid":
                return FernIr.ExamplePrimitive.uuid(value.uuid);
            default:
                return value;
        }
    },
    untransform: (_a) => {
        var { _visit } = _a, value = __rest(_a, ["_visit"]);
        return value;
    },
});
